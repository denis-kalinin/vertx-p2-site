vertx-core.description=Vert.x core provides functionality for things like:\n\
- Writing TCP clients and servers\n\
- Writing HTTP clients and servers including support for WebSockets\n\
- The Event bus\n\
- Shared data - local maps and clustered distributed maps\n\
- Periodic and delayed actions\n\
- Deploying and undeploying Verticles\n\
- Datagram Sockets\n\
- DNS client\n\
- File system access\n\
- High availability\n\
- Native transports\n\
- Clustering\n\
\n\
The functionality in core is fairly low level - you won\u2019t find stuff like database access, authorisation or high level web functionality here - that kind of stuff you\u2019ll find in Vert.x ext (extensions).\n\
\n\
Vert.x core is small and lightweight. You just use the parts you want. It\u2019s also entirely embeddable in your existing applications - we don\u2019t force you to structure your applications in a special way just so you can use Vert.x.\n\
\n\
You can use core from any of the other languages that Vert.x supports. But here\u2019a a cool bit - we don\u2019t force you to use the Java API directly from, say, JavaScript or Ruby - after all, different languages have different conventions and idioms, and it would be odd to force Java idioms on Ruby developers (for example). Instead, we automatically generate an idiomatic equivalent of the core Java APIs for each language.

vertx-web.description=Vert.x-Web is a great fit for writingRESTful HTTP micro-services*, but we don\u2019tforce* you to write apps like that.\n\
Some of the key features of Vert.x-Web include:\n\
- Routing (based on method, path, etc)\n\
- Regular expression pattern matching for paths\n\
- Extraction of parameters from paths\n\
- Content negotiation\n\
- Request body handling\n\
- Body size limits\n\
- Cookie parsing and handling\n\
- Multipart forms\n\
- Multipart file uploads\n\
- Sub routers\n\
- Session support - both local (for sticky sessions) and clustered (for non sticky)\n\
- CORS (Cross Origin Resource Sharing) support\n\
- Error page handler\n\
- Basic Authentication\n\
- Redirect based authentication\n\
- Authorisation handlers\n\
- JWT based authorization\n\
- User/role/permission authorisation\n\
- Favicon handling\n\
- Template support for server side rendering, including support for the following template engines out of the box:\n\
  - Handlebars\n\
  - Jade\n\
  - MVEL\n\
  - Thymeleaf\n\
  - Apache FreeMarker\n\
  - Pebble\n\
  - Rocker\n\
- Response time handler\n\
- Static file serving, including caching logic and directory listing.\n\
- Request timeout support\n\
- SockJS support\n\
- Event-bus bridge\n\
- CSRF Cross Site Request Forgery\n\
- VirtualHost\n\
\n\
Most features in Vert.x-Web are implemented as handlers so you can always write your own. We envisage many more being written over time.
